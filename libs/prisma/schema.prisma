generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  QA
  SUPERVISOR
  ATENDENTE
}

enum UserStatus {
  PENDING
  ACTIVE
  DISABLED
}

enum SuggestionRating {
  GOOD
  BAD
  NEUTRAL
}

enum SuggestionType {
  SCRIPT
  ACTION
  ALERT
}

model Tenant {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())

  users     User[]
  campaigns Campaign[]

  @@map("tenants")
}

model User {
  id           String     @id @default(uuid())
  email        String
  displayName  String?
  role         UserRole   @default(ATENDENTE)
  status       UserStatus @default(ACTIVE)
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@map("users")
}

model Campaign {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())

  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  policies      Policy[]
  pillars       Pillar[]
  rules         NegotiationRule[]
  scripts       Script[]
  conversations Conversation[]

  @@unique([tenantId, name])
  @@map("campaigns")
}

model Pillar {
  id          String   @id @default(uuid())
  name        String
  description String?
  weight      Int      @default(1)
  createdAt   DateTime @default(now())

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  tenantId   String
  @@map("pillars")
}

model NegotiationRule {
  id                    String   @id @default(uuid())
  maxDiscountPercentage Int?
  maxInstallments       Int?
  minDownPayment        Int?
  forbiddenTerms        String[]
  createdAt             DateTime @default(now())

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  tenantId   String
  @@map("negotiation_rules")
}

model Script {
  id          String   @id @default(uuid())
  category    String   
  body        String
  version     Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  campaignId String
  campaign   Campaign @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  tenantId   String
  @@map("scripts")
}


model Policy {
  id          String      @id @default(uuid())
  version     Int
  body        Json
  isActive    Boolean     @default(false)
  publishedBy String?
  createdAt   DateTime    @default(now())
  
  campaignId  String
  campaign    Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  tenantId   String
  @@unique([campaignId, version])
  @@map("policies")
}

model Conversation {
  id          String      @id @default(uuid())
  externalId  String   
  channel     String 
  startedAt   DateTime    @default(now())
  endedAt     DateTime?

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  tenantId   String

  events    ConversationEvent[]
  analysis  ConversationAnalysis?

  @@unique([campaignId, externalId])
  @@map("conversations")
}

model ConversationEvent {
  id             String   @id @default(uuid())
  author         String 
  text           String
  timestamp      DateTime
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  suggestions AISuggestion[]

  @@map("conversation_events")
}

model AISuggestion {
  id        String   @id @default(uuid())
  content   String 
  type      SuggestionType 
  createdAt DateTime @default(now())

  eventId String
  event   ConversationEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  feedback SuggestionFeedback?

  @@map("ai_suggestions")
}

model SuggestionFeedback {
  id        String           @id @default(uuid())
  rating    SuggestionRating 
  comment   String?
  createdAt DateTime         @default(now())

  suggestionId String       @unique 
  suggestion   AISuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  userId String 

  @@map("suggestion_feedbacks")
}

model ConversationAnalysis {
  id             String   @id @default(uuid())
  finalScore     Float
  adherenceRate  Float
  metrics        Json
  completedAt    DateTime @default(now())

  conversationId String   @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  tenantId   String
  
  @@map("conversation_analyses")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  userEmail String
  action    String
  targetId  String
  tenantId  String
  details   Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}